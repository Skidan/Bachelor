Вимоги до оточення.
Обладнання. Клієнт - будь-який девайс, здатний відобразити веб-сторінку та маючий засоби введення текстової інформації та взаємодії з елементами. Сервер: хмара, найбільш імовірно, Azure cloud.
Програмне оточення. Браузер: IE 8.0+, Firefox 21.0+, Chrome 27.0+, з дозволом на використанням cookies. Сервер: підтримка ASP.NET MVC Core 3.1, MS SQL Server.
З'єднання. Клієнт спілкується із сервером за протоколом TCP (http/https), але для завантаження медіаконтента можливе використання UDP.

Функціональні вимоги.
Авторизація / реєстрація користувача. Користувач має доступ до всіх функцій ПЗ тільки після успішної авторизації. Після реєстрації усі користувачі набують роль клієнта, яка надає обмежені права (оформлення рекламацій). Ролі з більшими правами надаються вручну адміністратором системи.
Заповнення рекламації. Кожен авторизований користувач має право сформувати та надіслати рекламацію.
Робота з рекламаціями. Відповідальна за роботу з рекламаціями особа може призначати завдання та відповідальних за їх виконання осіб. Відповідальні особи в той же час мають можливість зробити звіт з роботи (у вигляді коментара з метаконтентом), який підтверджує або відправляє на доопрацювання ініціатор завдання.
Робота з фінансами. В межах будь-якого завдання (чи рекламації) можливо отримувати та виписувати рахунки-фактури для їх подальшої оплати та аналізу картини витрат на якість вцілому.
Робота із вимірювальними приладами та складами. Кожному типу вимірювального прилада надається період повірки, ближче до закінчення якого періодично (раз на місяць) формується звіт з планом повірок на наступний місяц. Кожний екземпляр вимірювального приладу набуває інвентарний номер та призначається до використання/зберігання конкретним робітником. Під час повірки та в разі її непроходження, формується звіт на списання приладів, вони утилізуються по документах та ініціюється перевірка наявності цих приладів в достатній кількості на складах. У разі відсутності / недостатньої наявності приладів на складах, формується звіт на їх придбання. Звіт повинен формуватися, виходячи з динаміки використання / списання в межах останнього року та з урахуванням щомісячних тенденцій.
Робота з сертифікатами. Усі сертифікати, їх продовження, перевидання та модифікації, а також строки дії повинні бути введені в систему. Система повинна зазделегідь сповіщати про закінчення строку дії сертифіката його володаря, керівника володаря та менеджера з якості.
Статистика. Можливе виведення звітів кількості рекламацій по підрозділах, клієнтах, типах витрат та ін., а також по сумах на компенсації. Такі ж звіти потрібні по вимірювальних приладах.

Нефункціональні вимоги.
Архітектура. Продукт повинен бути модульним. Підключення додаткового модуля не повинен впливати на працездатність системи вцілому.
Доступність. Даний програмний продукт повинен бути кросплатформовим, із базою даних, як головним сховищем інформації. Програмну частину не обов'язково ділити на клієнта та сервер. Продукт повинен бути доступний цілодобово, сім днів на тиждень, але основне навантаження на нього очикується в робочі часи.
Безпека. ПЗ повинно містити модуль авторизації на не повинне надавати доступа незареєстрованим користувачам. З'єднання для передачі даних повинне бути шифорваним. Всі помилки повинні відловлюватись та записуватись в лог. Критичні помилки, що впливають на працездатність, відображаються клієнту.
Обслуговування. ПЗ найкраще розмістити в хмарах, де воно буде автоматично обслуговуватись без втручання клієнта.
Сховище даних.Уся інформація та посилання на медіаконтент зберігається в базі даних, сам медіаконтент - на файловому сховищі. Також БД повинна підтримувати використання процедур та тригерів (для формування автоматичних звітів). Резервне копіювання БД - раз на добу, медіаконтента - раз на тиждень.
Швидкодія. Якихось специфічних вимог до швидкодії нема, але для комфортної роботи час відгуку системи не повинен перевищувати логічного порогу, наприклад, в одну секунду.

Можливі обмеження розробки.
Недостатній час на проектування. Проектування може проводитись етапами (спрінтами), в яких поступово будуть додаватися нові модулі та покращуватися вже імплементовані.
